# Generated by Django 3.0.8 on 2020-07-21 08:42

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('simpellab_products', '0001_initial'),
        ('simpellab_partners', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('reg_number', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Reg number')),
                ('inner_id', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created at')),
                ('name', models.CharField(max_length=512, null=True, verbose_name='Name')),
                ('unit_price', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Product price')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1, message='Minimal value: 1'), django.core.validators.MaxValueValidator(500, message='Maximal value: 500')], verbose_name='Quantity')),
                ('total_price', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Total Price')),
                ('note', models.CharField(blank=True, max_length=512, null=True, verbose_name='Note')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_simpellab_sales.orderitem_set+', to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='SalesOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('reg_number', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Reg number')),
                ('inner_id', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created at')),
                ('qrcode', models.ImageField(blank=True, editable=False, null=True, upload_to='qrcode')),
                ('status', models.CharField(choices=[('TRS', 'Trash'), ('DRF', 'Draft'), ('VLD', 'Valid'), ('APP', 'Approved'), ('RJC', 'Rejected'), ('PRS', 'Processed'), ('CMP', 'Complete'), ('INV', 'Invoiced'), ('PND', 'Pending'), ('UNP', 'Un Paid'), ('PID', 'Paid'), ('CLS', 'Closed'), ('PST', 'Posted')], default='DRF', max_length=6, verbose_name='Status')),
                ('date_trashed', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date trashed')),
                ('date_drafted', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date drafted')),
                ('date_validated', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date validated')),
                ('date_approved', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date approved')),
                ('date_rejected', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date rejected')),
                ('date_completed', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date completed')),
                ('date_processed', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date processed')),
                ('contract', models.BooleanField(default=False, help_text='This order is based on customer contract')),
                ('contract_number', models.CharField(blank=True, max_length=256, null=True, verbose_name='Contract number')),
                ('customer_po', models.CharField(blank=True, max_length=512, null=True, verbose_name='Customer PO')),
                ('total_order', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Total Order')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Discount in percent', max_digits=15, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Discount')),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Total discount')),
                ('grand_total', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Grand Total')),
                ('note', models.TextField(blank=True, max_length=512, null=True, verbose_name='Note')),
                ('customer', models.ForeignKey(limit_choices_to={'is_customer': True}, on_delete=django.db.models.deletion.PROTECT, to='simpellab_partners.Partner', verbose_name='Customer')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_simpellab_sales.salesorder_set+', to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Sales Order',
                'verbose_name_plural': 'Sales Orders',
                'permissions': (('draft_salesorder', 'Can draft Sales Order'), ('trash_salesorder', 'Can trash Sales Order'), ('validate_salesorder', 'Can validate Sales Order'), ('complete_salesorder', 'Can complete Sales Order')),
            },
        ),
        migrations.CreateModel(
            name='CommonOrder',
            fields=[
                ('salesorder_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='simpellab_sales.SalesOrder')),
            ],
            options={
                'verbose_name': 'Common Order',
                'verbose_name_plural': 'Common Orders',
            },
            bases=('simpellab_sales.salesorder',),
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('reg_number', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Reg number')),
                ('inner_id', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created at')),
                ('qrcode', models.ImageField(blank=True, editable=False, null=True, upload_to='qrcode')),
                ('status', models.CharField(choices=[('TRS', 'Trash'), ('DRF', 'Draft'), ('VLD', 'Valid'), ('APP', 'Approved'), ('RJC', 'Rejected'), ('PRS', 'Processed'), ('CMP', 'Complete'), ('INV', 'Invoiced'), ('PND', 'Pending'), ('UNP', 'Un Paid'), ('PID', 'Paid'), ('CLS', 'Closed'), ('PST', 'Posted')], default='DRF', max_length=6, verbose_name='Status')),
                ('date_trashed', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date trashed')),
                ('date_pending', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date pending')),
                ('date_paid', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date paid')),
                ('date_closed', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Date closed')),
                ('sales_order_type', models.CharField(blank=True, max_length=256, null=True, verbose_name='Sales order type')),
                ('due_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Due date')),
                ('description', models.TextField(blank=True, max_length=2048, null=True, verbose_name='Description')),
                ('total_order', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Total Order')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Discount in percent', max_digits=15, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Discount')),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Total discount')),
                ('grand_total', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Grand Total')),
                ('paid', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='paid')),
                ('receivable', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='receivable')),
                ('refund', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='refund')),
                ('billed_to', models.ForeignKey(limit_choices_to={'is_customer': True}, null=True, on_delete=django.db.models.deletion.PROTECT, to='simpellab_partners.Partner', verbose_name='Customer')),
                ('sales_order', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='simpellab_sales.SalesOrder', verbose_name='sales order')),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
            },
        ),
        migrations.CreateModel(
            name='OrderFee',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('amount', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Fee amount')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1, message='Minimal value: 1'), django.core.validators.MaxValueValidator(500, message='Maximal value: 500')], verbose_name='Quantity')),
                ('total_fee', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Total fee')),
                ('note', models.CharField(blank=True, max_length=512, null=True, verbose_name='Note')),
                ('fee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_fees', to='simpellab_products.Fee')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_fees', to='simpellab_sales.SalesOrder', verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Order Fees',
                'verbose_name_plural': 'Order Fees',
                'ordering': ('fee',),
                'unique_together': {('order', 'fee')},
            },
        ),
        migrations.CreateModel(
            name='CommonOrderItem',
            fields=[
                ('orderitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='simpellab_sales.OrderItem')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='simpellab_sales.CommonOrder', verbose_name='sales order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sales_orders', to='simpellab_products.Product')),
            ],
            options={
                'verbose_name': 'Common Order Item',
                'verbose_name_plural': 'Common Order Items',
            },
            bases=('simpellab_sales.orderitem',),
        ),
    ]
